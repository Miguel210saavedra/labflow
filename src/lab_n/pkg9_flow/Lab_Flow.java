package lab_n.pkg9_flow;

import javax.swing.*;
import java.io.File;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import jaco.mp3.player.MP3Player;

public class Lab_Flow extends javax.swing.JFrame {

    String CancionActual = "";
    MP3Player Reproductor;
    String Path = "data.flw";
    String music = "";
    long Buscar = 0;
    boolean Play = false;

    public Lab_Flow() {
        initComponents();

        /*
        FORMATO:
        Path musica - String
        long - tiempo de la cancion
        String - name de la cancion
         */
        try {
            // Verificar que archivo de guardado de datos exista
            File data = new File("data.flw");

            removeAllSongs();
            if (!data.exists()) {
                data.createNewFile();
                RandomAccessFile rfdata = new RandomAccessFile(data, "rw");
                rfdata.writeUTF("");
                rfdata.writeLong(0);
                rfdata.writeUTF("");
                rfdata.close();

                songTitleLbl.setText("NOT PLAYING");
                setAllBtns(false);

            } else {
                RandomAccessFile rfdata = new RandomAccessFile(data, "rw");
                rfdata.seek(0);
                music = rfdata.readUTF();
                Buscar = rfdata.readLong();
                CancionActual = rfdata.readUTF();
                loadSongs();
                playLastSong();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void updateData(String musicPath, long songSeek, String songName) {
        try {
            System.out.println("Writing to disk...");
            RandomAccessFile rfdata = new RandomAccessFile(Path, "rw");
            rfdata.writeUTF(musicPath);
            rfdata.writeLong(songSeek);
            rfdata.writeUTF(songName);
            rfdata.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private ArrayList<String> getSongNamesFromPath(String musicPath) {
        if (musicPath.equals("")) {
            return new ArrayList<String>();
        }

        File folder = new File(musicPath);
        ArrayList<String> songs = new ArrayList<>();
        for (File f : folder.listFiles()) {
            if (f.getName().endsWith(".mp3")) {
                songs.add(f.getName().replace(".mp3", ""));
            }
        }

        return songs;
    }

    private void setAllBtns(boolean enabled) {
        PausaBtn.setEnabled(enabled);
        AnteriorBtn.setEnabled(enabled);
        SiguienteBtn.setEnabled(enabled);
    }

    private void playLastSong() {
        if (CancionActual.equals("")) {
            System.out.println("Ultima cancion es empty");
            songTitleLbl.setText("NOT PLAYING");
            setAllBtns(false);
        } else {
            System.out.println("Buscando ultima cancion...");
            System.out.println(CancionActual);
            boolean found = false;
            for (int i = 0; i < ReproductorMuList.getModel().getSize(); i++) {
                String n = ReproductorMuList.getModel().getElementAt(i);
                System.out.println(n);
                if (n.equals(CancionActual)) {
                    System.out.println("Se encontro ultima canciones reproducida");
                    String path = music + File.separator + CancionActual + ".mp3";
                    Reproductor = new MP3Player(new File(path));
                    songTitleLbl.setText(CancionActual);
                    Play = false;
                    PausaBtn.setText("PLAY");
                    setAllBtns(true);
                    found = true;
                    continue;
                }

                if (found) {
                    String name = ReproductorMuList.getModel().getElementAt(i);
                    String path = music + File.separator + name + ".mp3";
                    Reproductor.addToPlayList(new File(path));

                }
            }
        }
    }

    private void loadSongs() {
        System.out.println("Cargando todas las canciones...");
        ArrayList<String> songs = getSongNamesFromPath(music);

        ReproductorMuList.removeAll();
        DefaultListModel<String> model = new DefaultListModel<>();
        for (String song : songs) {
            model.addElement(song);
        }
        ReproductorMuList.setModel(model);

        setAllBtns(false);
        songTitleLbl.setText("NOT PLAYING");

    }

    private void removeAllSongs() {
        DefaultListModel<String> model = new DefaultListModel<>();
        ReproductorMuList.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        songTitleLbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReproductorMuList = new javax.swing.JList<>();
        AnteriorBtn = new javax.swing.JButton();
        PausaBtn = new javax.swing.JButton();
        SiguienteBtn = new javax.swing.JButton();
        SeleccionarBtn = new javax.swing.JButton();
        AñadirBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        songTitleLbl.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        songTitleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        songTitleLbl.setText("Reproductor de Musica ");

        ReproductorMuList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ReproductorMuList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ReproductorMuListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(ReproductorMuList);

        AnteriorBtn.setText("<<");
        AnteriorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnteriorBtnActionPerformed(evt);
            }
        });

        PausaBtn.setText("||");
        PausaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PausaBtnActionPerformed(evt);
            }
        });

        SiguienteBtn.setText(">>");
        SiguienteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SiguienteBtnActionPerformed(evt);
            }
        });

        SeleccionarBtn.setText("Seleccionar");
        SeleccionarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarBtnActionPerformed(evt);
            }
        });

        AñadirBtn.setText("Añadir");
        AñadirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Salir");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(AnteriorBtn)
                        .addGap(18, 18, 18)
                        .addComponent(PausaBtn)
                        .addGap(33, 33, 33)
                        .addComponent(SiguienteBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SeleccionarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(AñadirBtn))
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(songTitleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(songTitleLbl)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AnteriorBtn)
                    .addComponent(PausaBtn)
                    .addComponent(SiguienteBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SeleccionarBtn)
                        .addGap(26, 26, 26)
                        .addComponent(AñadirBtn)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PausaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PausaBtnActionPerformed
        // TODO add your handling code here:
        if (Play) {
            Play = false;
            PausaBtn.setText("PLAY");
            Reproductor.pause();
        } else {
            Play = true;
            PausaBtn.setText("PAUSE");
            Reproductor.play();
        }
    }//GEN-LAST:event_PausaBtnActionPerformed

    private void AnteriorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnteriorBtnActionPerformed
        // TODO add your handling code here:
        if (Reproductor != null) {
            Reproductor.skipBackward();

            for (int i = 0; i < ReproductorMuList.getModel().getSize(); i++) {
                String n = ReproductorMuList.getModel().getElementAt(i);

                if (n.equals(CancionActual)) {
                    if (i - 1 == -1) {
                        CancionActual = ReproductorMuList.getModel().getElementAt(0);
                    } else {
                        CancionActual = ReproductorMuList.getModel().getElementAt(i - 1);

                    }
                    songTitleLbl.setText(CancionActual);
                    updateData(music, Buscar, CancionActual);
                    playSong(CancionActual);
                    break;
                }
            }
        }
    }//GEN-LAST:event_AnteriorBtnActionPerformed

    private void playSong(String songName) {
        String path = music + File.separator + songName + ".mp3";

        if (Reproductor != null) {
            Reproductor.stop();
        }
        Reproductor = new MP3Player(new File(path));
        Reproductor.play();
        Play = true;
        PausaBtn.setText("PAUSE");
    }
    private void AñadirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirBtnActionPerformed
        // TODO add your handling code here:

        if (Reproductor != null) {
            Reproductor.stop();
        }

        try {

            JFileChooser chooser = new JFileChooser(System.getProperty("user.home"));
            chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            chooser.showOpenDialog(this);
            System.out.println("Se cerro el File chooser");

            File selectedFolder = chooser.getSelectedFile();

            if (selectedFolder == null) {
                return;
            }

            // Dejar de reproducir musica
            music = selectedFolder.getCanonicalPath();
            Buscar = 0;
            CancionActual = "";
            updateData(music, Buscar, CancionActual);
            loadSongs();
        } catch (Exception e) {
            e.printStackTrace();
        }


    }//GEN-LAST:event_AñadirBtnActionPerformed

    private void SiguienteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SiguienteBtnActionPerformed
        // TODO add your handling code here:
        if (Reproductor != null) {
            Reproductor.skipForward();

            for (int i = 0; i < ReproductorMuList.getModel().getSize(); i++) {
                String n = ReproductorMuList.getModel().getElementAt(i);

                if (n.equals(CancionActual)) {
                    if (i + 1 == ReproductorMuList.getModel().getSize()) {
                        CancionActual = ReproductorMuList.getModel().getElementAt(0);
                    } else {
                        CancionActual = ReproductorMuList.getModel().getElementAt(i + 1);

                    }
                    songTitleLbl.setText(CancionActual);
                    updateData(music, Buscar, CancionActual);

                    playSong(CancionActual);
                    break;
                }
            }
        }
    }//GEN-LAST:event_SiguienteBtnActionPerformed

    private void SeleccionarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarBtnActionPerformed
        // TODO add your handling code here:
        if (Reproductor != null) {
            Reproductor.stop();
        }

        if (ReproductorMuList.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(this, "Seleccione primero una cancion para reproducir.");
            return;
        }
        CancionActual = ReproductorMuList.getSelectedValue();

        updateData(music, Buscar, CancionActual);

        songTitleLbl.setText(CancionActual);
        File songFile = new File(music + File.separator + CancionActual + ".mp3");
        Reproductor = new MP3Player(songFile);
        Reproductor.play();
        Play = true;
        PausaBtn.setText("PAUSE");
        setAllBtns(true);

        updateData(music, Buscar, CancionActual);


    }//GEN-LAST:event_SeleccionarBtnActionPerformed

    private void ReproductorMuListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ReproductorMuListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ReproductorMuListValueChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(null, "Gracias por la preferencia!");
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Lab_Flow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Lab_Flow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Lab_Flow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Lab_Flow.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Lab_Flow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnteriorBtn;
    private javax.swing.JButton AñadirBtn;
    private javax.swing.JButton PausaBtn;
    private javax.swing.JList<String> ReproductorMuList;
    private javax.swing.JButton SeleccionarBtn;
    private javax.swing.JButton SiguienteBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel songTitleLbl;
    // End of variables declaration//GEN-END:variables
}
